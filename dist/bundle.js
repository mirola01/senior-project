/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./dist/scripts/auth.js":
/*!******************************!*\
  !*** ./dist/scripts/auth.js ***!
  \******************************/
/***/ (() => {

eval("\r\n// Fauna client\r\nvar faunadb = window.faunadb;\r\nvar q = faunadb.query;\r\n\r\nlet auth0 = null;\r\n\r\n\r\nconst fetchAuthConfig = () => fetch(\"https://lineup-manager-4559a9dca214.herokuapp.com/auth_config.json\");\r\n\r\n// Auth0 Client\r\nconst configureClient = async () => {\r\n    const response = await fetchAuthConfig();\r\n    const config = await response.json();\r\n\r\n    auth0 = await createAuth0Client({\r\n        domain: config.domain,\r\n        client_id: config.clientId,\r\n        audience: config.aud\r\n    });\r\n};\r\n\r\nconst updateUI = async () => {\r\n    const isAuthenticated = await auth0.isAuthenticated();\r\n    console.log(isAuthenticated);\r\n\r\n\r\n    if (isAuthenticated) {\r\n        const accessToken = await auth0.getTokenSilently();\r\n        console.log(accessToken);\r\n\r\n        // fetch players\r\n        var client = new faunadb.Client({\r\n            secret: accessToken,\r\n            domain: 'db.us.fauna.com',\r\n            port: 443,\r\n            scheme: 'https'\r\n        })\r\n        document.getElementById(\"auth-btn\").innerHTML = \"Logout\"\r\n        //document.querySelector(\".card-container\").style.display = 'grid';\r\n\r\n        // check the role\r\n        let token = await client.query(\r\n            q.CurrentToken()\r\n        )\r\n        let user_role = token[\"https:/db.fauna.com/roles\"][0]\r\n        console.log(user_role)\r\n\r\n        if (user_role === 'user') {\r\n            document.querySelector('#add-new-btn').style.display = 'block';\r\n\r\n            let players = await client.query(\r\n                q.Map(\r\n                    q.Paginate(\r\n                        q.Match(q.Index('players_by_owner'), q.CurrentIdentity())\r\n                    ),\r\n                    q.Lambda(\r\n                        \"X\", q.Get(q.Var(\"X\"))\r\n                    )\r\n                )\r\n\r\n            );\r\n            //players_section = document.querySelector('.card-container');\r\n            //const addCard = players_section.lastElementChild\r\n            //players_section.lastElementChild.remove()\r\n            const tableBody = document.querySelector('#player-table tbody');\r\n            var htmlText = players['data'].map(function (o) {\r\n                // Create a checkbox input element\r\n                const checkbox = document.createElement(\"input\");\r\n                checkbox.type = \"checkbox\";\r\n                checkbox.className = \"delete-checkbox\"; // Add a class for identification\r\n                checkbox.setAttribute(\"data-id\", o.ref.id); // Set the data-id attribute\r\n              \r\n                // Create a label element for the checkbox\r\n                const label = document.createElement(\"label\");\r\n                label.htmlFor = o.ref.id; // Match the 'for' attribute to the checkbox's ID\r\n                label.textContent = \"Checkbox Label\"; // You can customize the label text\r\n              \r\n                return `\r\n                  <tr>\r\n                    <td>${o.data.name}</td>\r\n                    <td>${o.data.age}</td>\r\n                    <td>${o.data.position}</td>\r\n                    <td>${checkbox.outerHTML}</td>\r\n                  </tr>`;\r\n              });\r\n              \r\n              tableBody.innerHTML = htmlText.join('');\r\n\r\n\r\n            //players_section.innerHTML += htmlText.join('');\r\n            //players_section.appendChild(addCard)\r\n            //document.querySelector('.please-login').style.display = 'none';\r\n\r\n        } else {\r\n            document.querySelector('#add-new-btn').style.display = 'none';\r\n            document.querySelector('#new-card-btn').style.display = 'none';\r\n            document.querySelector('#search-bar').style.display = 'none';\r\n            document.querySelector('.admin-msg').style.display = 'block';\r\n            //players_section = document.querySelector('.card-container');\r\n            let players = await client.query(\r\n                q.Map(\r\n                    q.Paginate(\r\n                        q.Match(q.Index('allPlayers'))\r\n                    ),\r\n                    q.Lambda(\r\n                        \"X\", q.Get(q.Var(\"X\"))\r\n                    )\r\n                )\r\n\r\n            );\r\n\r\n            //players_section.style.display = 'grid';\r\n            const tableBody = document.querySelector('#player-table tbody');\r\n            var htmlText = players['data'].map(function (o) {\r\n                return `\r\n                    <tr>\r\n                    <td>${o.data.name}</td>\r\n                    <td>${o.data.age}</td>\r\n                    <td>${o.data.position}</td>\r\n                    </tr>`;\r\n                });\r\n            tableBody.innerHTML = htmlText.join('');\r\n\r\n            // document.querySelector('.please-login').style.display = 'None';\r\n        }\r\n\r\n    } else {\r\n        document.getElementById(\"auth-btn\").innerHTML = \"Login\"\r\n    }\r\n};\r\n\r\nconst login = async () => {\r\n    await auth0.loginWithRedirect({\r\n        redirect_uri: \"https://lineup-manager.netlify.app/player-database.html\"\r\n    });\r\n};\r\n\r\nconst logout = () => {\r\n    auth0.logout({\r\n        returnTo: \"https://lineup-manager.netlify.app\"\r\n    });\r\n};\r\n\r\ndocument.getElementById(\"auth-btn\").addEventListener('click', () => {\r\n    if (document.getElementById(\"auth-btn\").innerHTML == \"Login\") {\r\n        login();\r\n    } else {\r\n        logout();\r\n    }\r\n})\r\n\r\nwindow.onload = async () => {\r\n    await configureClient();\r\n    // Event listener for delete checkboxes\r\n    updateUI();\r\n\r\n    const query = window.location.search;\r\n    if (query.includes(\"code=\") && query.includes(\"state=\")) {\r\n\r\n        // Process the login state\r\n        await auth0.handleRedirectCallback();\r\n\r\n        updateUI();\r\n\r\n        // Use replaceState to redirect the user away and remove the querystring parameters\r\n        window.history.replaceState({}, document.title, \"/\");\r\n    }\r\n};\r\n\r\nconst btn = document.querySelector('#add-player');\r\n\r\nconst new_player = async () => {\r\n    const isAuthenticated = await auth0.isAuthenticated();\r\n    const accessToken = await auth0.getTokenSilently();\r\n    console.log(accessToken);\r\n    console.log(\"the token is \" + accessToken)\r\n    if (isAuthenticated) {\r\n        var client = new faunadb.Client({\r\n            secret: String(accessToken),\r\n            domain: 'db.us.fauna.com',\r\n            port: 443,\r\n            scheme: 'https'\r\n        })\r\n\r\n        let data = await client.query(\r\n                q.Create(q.Collection(\"Players\"), {\r\n                    data: {\r\n                        name: document.querySelector('#playerName').value,\r\n                        age: document.querySelector('#playerAge').value,\r\n                        position: document.querySelector('#playerPosition').value,\r\n                        owner: q.CurrentIdentity()\r\n                    }\r\n                })\r\n            ).then((ret) => console.log(ret))\r\n            .catch((err) => console.error('Error: %s', err))\r\n\r\n        console.log(data);\r\n        // note_container.appendChild(add_new_card);\r\n        body_.classList.remove('container-fade');\r\n        form.style.display = 'none';\r\n        window.location.reload();\r\n    }\r\n};\r\n// Function to delete a player by ID\r\nconst delete_player = async (playerId) => {\r\n    try {\r\n      const isAuthenticated = await auth0.isAuthenticated();\r\n      const accessToken = await auth0.getTokenSilently();\r\n      \r\n      if (isAuthenticated) {\r\n        var client = new faunadb.Client({\r\n          secret: String(accessToken),\r\n          domain: 'db.us.fauna.com',\r\n          port: 443,\r\n          scheme: 'https'\r\n        });\r\n  \r\n        // Use q.Delete to remove the player document by ID\r\n        await client.query(\r\n          q.Delete(q.Ref(q.Collection(\"Players\"), playerId))\r\n        );\r\n  \r\n        // Optionally, display a success message or perform any other necessary actions\r\n        console.log(`Player with ID ${playerId} deleted successfully.`);\r\n        window.location.reload();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting player:', error);\r\n    }\r\n  };\r\n\r\nbtn.addEventListener('click', new_player);\r\n\r\n// Event listener for a delete button or checkbox click\r\ndocument.addEventListener('click', async function (e) {\r\n  if (e.target && e.target.classList.contains('delete-checkbox')) {\r\n    const playerId = e.target.getAttribute('data-id');\r\n    if (confirm('Are you sure you want to delete this player?')) {\r\n      await delete_player(playerId);\r\n    }\r\n  }\r\n});\n\n//# sourceURL=webpack://lineup-manager/./dist/scripts/auth.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./dist/scripts/auth.js"]();
/******/ 	
/******/ })()
;